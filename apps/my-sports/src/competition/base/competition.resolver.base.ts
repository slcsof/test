/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCompetitionArgs } from "./CreateCompetitionArgs";
import { UpdateCompetitionArgs } from "./UpdateCompetitionArgs";
import { DeleteCompetitionArgs } from "./DeleteCompetitionArgs";
import { CompetitionFindManyArgs } from "./CompetitionFindManyArgs";
import { CompetitionFindUniqueArgs } from "./CompetitionFindUniqueArgs";
import { Competition } from "./Competition";
import { AthleteFindManyArgs } from "../../athlete/base/AthleteFindManyArgs";
import { Athlete } from "../../athlete/base/Athlete";
import { SponsorFindManyArgs } from "../../sponsor/base/SponsorFindManyArgs";
import { Sponsor } from "../../sponsor/base/Sponsor";
import { TeamFindManyArgs } from "../../team/base/TeamFindManyArgs";
import { Team } from "../../team/base/Team";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { Account } from "../../account/base/Account";
import { CompetitionService } from "../competition.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Competition)
export class CompetitionResolverBase {
  constructor(
    protected readonly service: CompetitionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "read",
    possession: "any",
  })
  async _competitionsMeta(
    @graphql.Args() args: CompetitionFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Competition])
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "read",
    possession: "any",
  })
  async competitions(
    @graphql.Args() args: CompetitionFindManyArgs
  ): Promise<Competition[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Competition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "read",
    possession: "own",
  })
  async competition(
    @graphql.Args() args: CompetitionFindUniqueArgs
  ): Promise<Competition | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Competition)
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "create",
    possession: "any",
  })
  async createCompetition(
    @graphql.Args() args: CreateCompetitionArgs
  ): Promise<Competition> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        accounts: {
          connect: args.data.accounts,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Competition)
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "update",
    possession: "any",
  })
  async updateCompetition(
    @graphql.Args() args: UpdateCompetitionArgs
  ): Promise<Competition | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          accounts: {
            connect: args.data.accounts,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Competition)
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "delete",
    possession: "any",
  })
  async deleteCompetition(
    @graphql.Args() args: DeleteCompetitionArgs
  ): Promise<Competition | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Athlete], { name: "athlete" })
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "read",
    possession: "any",
  })
  async resolveFieldAthlete(
    @graphql.Parent() parent: Competition,
    @graphql.Args() args: AthleteFindManyArgs
  ): Promise<Athlete[]> {
    const results = await this.service.findAthlete(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sponsor], { name: "sponsors" })
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "read",
    possession: "any",
  })
  async resolveFieldSponsors(
    @graphql.Parent() parent: Competition,
    @graphql.Args() args: SponsorFindManyArgs
  ): Promise<Sponsor[]> {
    const results = await this.service.findSponsors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Team], { name: "team" })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async resolveFieldTeam(
    @graphql.Parent() parent: Competition,
    @graphql.Args() args: TeamFindManyArgs
  ): Promise<Team[]> {
    const results = await this.service.findTeam(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "user" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Competition,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "accounts",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async resolveFieldAccounts(
    @graphql.Parent() parent: Competition
  ): Promise<Account | null> {
    const result = await this.service.getAccounts(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
