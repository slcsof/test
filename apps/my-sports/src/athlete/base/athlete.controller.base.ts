/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AthleteService } from "../athlete.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AthleteCreateInput } from "./AthleteCreateInput";
import { AthleteWhereInput } from "./AthleteWhereInput";
import { AthleteWhereUniqueInput } from "./AthleteWhereUniqueInput";
import { AthleteFindManyArgs } from "./AthleteFindManyArgs";
import { AthleteUpdateInput } from "./AthleteUpdateInput";
import { Athlete } from "./Athlete";
import { CompetitionFindManyArgs } from "../../competition/base/CompetitionFindManyArgs";
import { Competition } from "../../competition/base/Competition";
import { CompetitionWhereUniqueInput } from "../../competition/base/CompetitionWhereUniqueInput";
import { SponsorFindManyArgs } from "../../sponsor/base/SponsorFindManyArgs";
import { Sponsor } from "../../sponsor/base/Sponsor";
import { SponsorWhereUniqueInput } from "../../sponsor/base/SponsorWhereUniqueInput";
import { TeamFindManyArgs } from "../../team/base/TeamFindManyArgs";
import { Team } from "../../team/base/Team";
import { TeamWhereUniqueInput } from "../../team/base/TeamWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AthleteControllerBase {
  constructor(
    protected readonly service: AthleteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Athlete })
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: AthleteCreateInput): Promise<Athlete> {
    return await this.service.create({
      data: {
        ...data,

        accounts: {
          connect: data.accounts,
        },
      },
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        starts: true,
        updatedAt: true,
        votes: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Athlete] })
  @ApiNestedQuery(AthleteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<Athlete[]> {
    const args = plainToClass(AthleteFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        starts: true,
        updatedAt: true,
        votes: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Athlete })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: AthleteWhereUniqueInput
  ): Promise<Athlete | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        starts: true,
        updatedAt: true,
        votes: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Athlete })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() data: AthleteUpdateInput
  ): Promise<Athlete | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          accounts: {
            connect: data.accounts,
          },
        },
        select: {
          accounts: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          starts: true,
          updatedAt: true,
          votes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Athlete })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: AthleteWhereUniqueInput
  ): Promise<Athlete | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          accounts: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          starts: true,
          updatedAt: true,
          votes: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/competitions")
  @ApiNestedQuery(CompetitionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "read",
    possession: "any",
  })
  async findManyCompetitions(
    @common.Req() request: Request,
    @common.Param() params: AthleteWhereUniqueInput
  ): Promise<Competition[]> {
    const query = plainToClass(CompetitionFindManyArgs, request.query);
    const results = await this.service.findCompetitions(params.id, {
      ...query,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/competitions")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async connectCompetitions(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: CompetitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      competitions: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/competitions")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async updateCompetitions(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: CompetitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      competitions: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/competitions")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async disconnectCompetitions(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: CompetitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      competitions: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sponsors")
  @ApiNestedQuery(SponsorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "read",
    possession: "any",
  })
  async findManySponsors(
    @common.Req() request: Request,
    @common.Param() params: AthleteWhereUniqueInput
  ): Promise<Sponsor[]> {
    const query = plainToClass(SponsorFindManyArgs, request.query);
    const results = await this.service.findSponsors(params.id, {
      ...query,
      select: {
        athlete: {
          select: {
            id: true,
          },
        },

        competition: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sponsors")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async connectSponsors(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: SponsorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sponsors: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sponsors")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async updateSponsors(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: SponsorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sponsors: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sponsors")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async disconnectSponsors(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: SponsorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sponsors: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/teams")
  @ApiNestedQuery(TeamFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async findManyTeams(
    @common.Req() request: Request,
    @common.Param() params: AthleteWhereUniqueInput
  ): Promise<Team[]> {
    const query = plainToClass(TeamFindManyArgs, request.query);
    const results = await this.service.findTeams(params.id, {
      ...query,
      select: {
        accounts: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async connectTeams(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async updateTeams(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/teams")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async disconnectTeams(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: TeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teams: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findManyUsers(
    @common.Req() request: Request,
    @common.Param() params: AthleteWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        athlete: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        starts: true,

        team: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        username: true,
        vote: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: AthleteWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
