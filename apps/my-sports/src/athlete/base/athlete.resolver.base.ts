/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAthleteArgs } from "./CreateAthleteArgs";
import { UpdateAthleteArgs } from "./UpdateAthleteArgs";
import { DeleteAthleteArgs } from "./DeleteAthleteArgs";
import { AthleteFindManyArgs } from "./AthleteFindManyArgs";
import { AthleteFindUniqueArgs } from "./AthleteFindUniqueArgs";
import { Athlete } from "./Athlete";
import { CompetitionFindManyArgs } from "../../competition/base/CompetitionFindManyArgs";
import { Competition } from "../../competition/base/Competition";
import { SponsorFindManyArgs } from "../../sponsor/base/SponsorFindManyArgs";
import { Sponsor } from "../../sponsor/base/Sponsor";
import { TeamFindManyArgs } from "../../team/base/TeamFindManyArgs";
import { Team } from "../../team/base/Team";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { Account } from "../../account/base/Account";
import { AthleteService } from "../athlete.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Athlete)
export class AthleteResolverBase {
  constructor(
    protected readonly service: AthleteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "read",
    possession: "any",
  })
  async _athletesMeta(
    @graphql.Args() args: AthleteFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Athlete])
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "read",
    possession: "any",
  })
  async athletes(
    @graphql.Args() args: AthleteFindManyArgs
  ): Promise<Athlete[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Athlete, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "read",
    possession: "own",
  })
  async athlete(
    @graphql.Args() args: AthleteFindUniqueArgs
  ): Promise<Athlete | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Athlete)
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "create",
    possession: "any",
  })
  async createAthlete(
    @graphql.Args() args: CreateAthleteArgs
  ): Promise<Athlete> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        accounts: {
          connect: args.data.accounts,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Athlete)
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "update",
    possession: "any",
  })
  async updateAthlete(
    @graphql.Args() args: UpdateAthleteArgs
  ): Promise<Athlete | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          accounts: {
            connect: args.data.accounts,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Athlete)
  @nestAccessControl.UseRoles({
    resource: "Athlete",
    action: "delete",
    possession: "any",
  })
  async deleteAthlete(
    @graphql.Args() args: DeleteAthleteArgs
  ): Promise<Athlete | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Competition], { name: "competitions" })
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "read",
    possession: "any",
  })
  async resolveFieldCompetitions(
    @graphql.Parent() parent: Athlete,
    @graphql.Args() args: CompetitionFindManyArgs
  ): Promise<Competition[]> {
    const results = await this.service.findCompetitions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sponsor], { name: "sponsors" })
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "read",
    possession: "any",
  })
  async resolveFieldSponsors(
    @graphql.Parent() parent: Athlete,
    @graphql.Args() args: SponsorFindManyArgs
  ): Promise<Sponsor[]> {
    const results = await this.service.findSponsors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Team], { name: "teams" })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async resolveFieldTeams(
    @graphql.Parent() parent: Athlete,
    @graphql.Args() args: TeamFindManyArgs
  ): Promise<Team[]> {
    const results = await this.service.findTeams(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: Athlete,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "accounts",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async resolveFieldAccounts(
    @graphql.Parent() parent: Athlete
  ): Promise<Account | null> {
    const result = await this.service.getAccounts(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
