/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSponsorArgs } from "./CreateSponsorArgs";
import { UpdateSponsorArgs } from "./UpdateSponsorArgs";
import { DeleteSponsorArgs } from "./DeleteSponsorArgs";
import { SponsorFindManyArgs } from "./SponsorFindManyArgs";
import { SponsorFindUniqueArgs } from "./SponsorFindUniqueArgs";
import { Sponsor } from "./Sponsor";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { Player } from "../../player/base/Player";
import { Competition } from "../../competition/base/Competition";
import { Team } from "../../team/base/Team";
import { SponsorService } from "../sponsor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sponsor)
export class SponsorResolverBase {
  constructor(
    protected readonly service: SponsorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "read",
    possession: "any",
  })
  async _sponsorsMeta(
    @graphql.Args() args: SponsorFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sponsor])
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "read",
    possession: "any",
  })
  async sponsors(
    @graphql.Args() args: SponsorFindManyArgs
  ): Promise<Sponsor[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sponsor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "read",
    possession: "own",
  })
  async sponsor(
    @graphql.Args() args: SponsorFindUniqueArgs
  ): Promise<Sponsor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sponsor)
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "create",
    possession: "any",
  })
  async createSponsor(
    @graphql.Args() args: CreateSponsorArgs
  ): Promise<Sponsor> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        athlete: args.data.athlete
          ? {
              connect: args.data.athlete,
            }
          : undefined,

        competition: args.data.competition
          ? {
              connect: args.data.competition,
            }
          : undefined,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sponsor)
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "update",
    possession: "any",
  })
  async updateSponsor(
    @graphql.Args() args: UpdateSponsorArgs
  ): Promise<Sponsor | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          athlete: args.data.athlete
            ? {
                connect: args.data.athlete,
              }
            : undefined,

          competition: args.data.competition
            ? {
                connect: args.data.competition,
              }
            : undefined,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sponsor)
  @nestAccessControl.UseRoles({
    resource: "Sponsor",
    action: "delete",
    possession: "any",
  })
  async deleteSponsor(
    @graphql.Args() args: DeleteSponsorArgs
  ): Promise<Sponsor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "user" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(
    @graphql.Parent() parent: Sponsor,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "athlete",
  })
  @nestAccessControl.UseRoles({
    resource: "Player",
    action: "read",
    possession: "any",
  })
  async resolveFieldAthlete(
    @graphql.Parent() parent: Sponsor
  ): Promise<Player | null> {
    const result = await this.service.getAthlete(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Competition, {
    nullable: true,
    name: "competition",
  })
  @nestAccessControl.UseRoles({
    resource: "Competition",
    action: "read",
    possession: "any",
  })
  async resolveFieldCompetition(
    @graphql.Parent() parent: Sponsor
  ): Promise<Competition | null> {
    const result = await this.service.getCompetition(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async resolveFieldTeam(
    @graphql.Parent() parent: Sponsor
  ): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
